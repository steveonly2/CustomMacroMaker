import tkinter as tk
import pynput.mouse as mouse
import pynput.keyboard as keyboard
import time
import threading
import os
import requests

class MacroRecorder:
    def __init__(self):
        self.recording = False
        self.replaying = False
        self.events = []
        self.infinite_replay = False
        self.start_time = None

    def start_recording(self):
        self.events = []
        self.recording = True
        self.start_time = time.time()
        self.show_message("Recording started...")

        self.mouse_listener = mouse.Listener(on_click=self.on_click, on_move=self.on_move, on_scroll=self.on_scroll)
        self.keyboard_listener = keyboard.Listener(on_press=self.on_press, on_release=self.on_release)

        self.mouse_listener.start()
        self.keyboard_listener.start()

    def stop_recording(self):
        self.recording = False
        self.mouse_listener.stop()
        self.keyboard_listener.stop()
        self.show_message("Recording stopped.")

    def replay(self):
        if not self.events:
            self.show_message("No recorded events to replay.")
            return

        if self.replaying:
            self.replaying = False
            self.show_message("Replay stopped.")
            return

        self.replaying = True
        self.show_message("Replaying events...")

        def replay_events():
            while self.replaying:
                start_time = self.events[0][1]

                for event in self.events:
                    if not self.replaying:
                        break
                    time.sleep(event[1] - start_time)
                    event[0]()
                    start_time = event[1]

                if not self.infinite_replay:
                    break

            self.show_message("Replay completed.")

        replay_thread = threading.Thread(target=replay_events)
        replay_thread.start()

    def on_click(self, x, y, button, pressed):
        if self.recording:
            self.events.append((lambda: mouse.Controller().click(button, 1 if pressed else 0), time.time() - self.start_time))

    def on_move(self, x, y):
        if self.recording:
            self.events.append((lambda: mouse.Controller().move(x, y), time.time() - self.start_time))

    def on_scroll(self, x, y, dx, dy):
        if self.recording:
            self.events.append((lambda: mouse.Controller().scroll(dx, dy), time.time() - self.start_time))

    def on_press(self, key):
        if self.recording:
            self.events.append((lambda: keyboard.Controller().press(key), time.time() - self.start_time))

    def on_release(self, key):
        if self.recording:
            self.events.append((lambda: keyboard.Controller().release(key), time.time() - self.start_time))

    def show_message(self, message):
        status_label.config(text=message)

def start_recording():
    recorder.start_recording()

def stop_recording():
    recorder.stop_recording()

def replay():
    recorder.replay()

def toggle_infinite_replay():
    recorder.infinite_replay = not recorder.infinite_replay

def emergency_stop():
    root.quit()

def check_version():
    version_url = "https://raw.githubusercontent.com/suiyang12/CustomMacroMaker/main/version.json"
    try:
        response = requests.get(version_url)
        response.raise_for_status()
        latest_version = response.json().get("version", "0.0.0")

        if latest_version != current_version:
            download_latest_version()
        else:
            show_message("You are using the latest version.")

    except requests.RequestException as e:
        show_message(f"Error checking for updates: {e}")

def download_latest_version():
    download_url = "https://raw.githubusercontent.com/suiyang12/CustomMacroMaker/main/latest_version.py"
    try:
        response = requests.get(download_url)
        response.raise_for_status()
        with open("updated_script.py", "wb") as f:
            f.write(response.content)
        show_message("Downloaded the latest version.")
    except requests.RequestException as e:
        show_message(f"Error downloading the latest version: {e}")

# GUI Setup
root = tk.Tk()
root.title("Macro Recorder")

# Increase the size of the window
root.geometry("450x300")

recorder = MacroRecorder()
current_version = "1.0.0"

# Create GUI elements
start_button = tk.Button(root, text="Start Recording (F1)", command=start_recording, width=30)
stop_button = tk.Button(root, text="Stop Recording (F2)", command=stop_recording, width=30)
replay_button = tk.Button(root, text="Replay Recording (F3)", command=replay, width=30)
status_label = tk.Label(root, text="Status: Idle", pady=10)
infinite_replay_var = tk.BooleanVar()
infinite_replay_checkbox = tk.Checkbutton(root, text="Infinite Replay", variable=infinite_replay_var, command=toggle_infinite_replay)

# Place GUI elements with some gaps
start_button.pack(pady=5)
stop_button.pack(pady=5)
replay_button.pack(pady=5)
infinite_replay_checkbox.pack(pady=5)
status_label.pack(pady=10)

# Credits Tab
credits_button = tk.Button(root, text="Credits", command=lambda: tk.messagebox.showinfo("Credits", "Made by Steve/suiyang12"), width=30)
credits_button.pack(pady=10)

# Bind hotkeys
root.bind("<F1>", lambda e: start_recording())
root.bind("<F2>", lambda e: stop_recording())
root.bind("<F3>", lambda e: replay())
root.bind("<Control-q>", lambda e: emergency_stop())
root.bind("<Control-c>", lambda e: emergency_stop())

# Check for updates on startup
check_version()

# Start the GUI loop
root.mainloop()
